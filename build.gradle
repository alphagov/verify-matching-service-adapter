buildscript {
    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
            maven { url 'https://dl.bintray.com/alphagov/maven-test' }
            maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases' }
            jcenter()
        }
        else {
            maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
        }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    }
}

apply plugin: "java"
apply plugin: "jacoco"
apply plugin: 'application'
apply plugin: 'com.github.ben-manes.versions'

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

ext {
    opensaml = '3.4.3'
    build_number="$version"
}

group = "uk.gov.ida"
project.version = "$gradle.ext.version_number-$build_number"

def dependencyVersions = [
        opensaml:"$opensaml",
        dropwizard: '1.3.5',
        ida_utils: '386',
        ida_test_utils: '44',
        dev_pki: '1.1.0-34',
        saml_libs_version: "$opensaml-250"
]

repositories {
    if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
        logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
        maven { url 'https://dl.bintray.com/alphagov/maven' } // For dropwizard-logstash
        maven { url 'https://dl.bintray.com/alphagov/maven-test' } // For other public verify binaries
        maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases' }  // For opensaml
        jcenter()
    }
    else {
        maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
    }
}

configurations {
    dropwizard
    saml
    ida
    ida_test
}

dependencies {
    dropwizard "io.dropwizard:dropwizard-core:$dependencyVersions.dropwizard",
        "io.dropwizard:dropwizard-util:$dependencyVersions.dropwizard",
        'io.dropwizard.metrics:metrics-healthchecks:3.1.2',
        "io.dropwizard:dropwizard-jersey:$dependencyVersions.dropwizard",
        'io.dropwizard.metrics:metrics-annotation:3.1.2',
        "io.dropwizard:dropwizard-client:$dependencyVersions.dropwizard",
        'com.hubspot.dropwizard:dropwizard-guicier:1.0.0.6',
        "io.dropwizard:dropwizard-metrics-graphite:$dependencyVersions.dropwizard"

    saml "org.opensaml:opensaml-core:$dependencyVersions.opensaml",
        "org.opensaml:opensaml-security-api:$dependencyVersions.opensaml",
        "org.opensaml:opensaml-saml-api:$dependencyVersions.opensaml",
        "org.opensaml:opensaml-xmlsec-api:$dependencyVersions.opensaml",
        "org.opensaml:opensaml-saml-impl:$dependencyVersions.opensaml",
        "org.opensaml:opensaml-xmlsec-impl:$dependencyVersions.opensaml",
        'net.shibboleth.utilities:java-support:7.2.0'

    ida "uk.gov.ida:saml-lib:$dependencyVersions.saml_libs_version",
        "uk.gov.ida:rest-utils:2.0.0-$dependencyVersions.ida_utils",
        "uk.gov.ida:security-utils:2.0.0-$dependencyVersions.ida_utils",
        "uk.gov.ida:common-utils:2.0.0-$dependencyVersions.ida_utils"

    compile configurations.dropwizard,
        configurations.ida,
        'javax.inject:javax.inject:1',
        'javax.validation:validation-api:1.1.0.Final',
        'com.fasterxml.jackson.core:jackson-annotations:2.6.0',
        'com.fasterxml.jackson.core:jackson-databind:2.9.7',
        'com.google.guava:guava:18.0',
        'com.google.inject:guice:3.0',
        'joda-time:joda-time:2.9',
        'org.slf4j:slf4j-api:1.7.21',
        'javax.ws.rs:javax.ws.rs-api:2.0.1',
        'commons-codec:commons-codec:1.10',
        'commons-lang:commons-lang:2.6',
        'org.apache.ws.commons:ws-commons-util:1.0.1',
        'com.google.code.findbugs:annotations:3.0.0',
        'xml-apis:xml-apis:1.0.b2',
        'javax.xml.bind:jaxb-api:2.2.3',
        configurations.saml   {
            exclude group: 'uk.gov.ida', module: 'dropwizard-saml'
        }

    runtime "io.dropwizard:dropwizard-metrics-graphite:$dependencyVersions.dropwizard"

    ida_test "uk.gov.ida:saml-test:$dependencyVersions.saml_libs_version",
        "uk.gov.ida:ida-dev-pki:$dependencyVersions.dev_pki"

    testCompile configurations.ida_test,
        'junit:junit:4.11',
        "io.dropwizard:dropwizard-testing:$dependencyVersions.dropwizard",
        "io.dropwizard:dropwizard-jackson:$dependencyVersions.dropwizard",
        'org.assertj:assertj-core:3.9.1',
        'org.mockito:mockito-core:2.23.0',
        'org.assertj:assertj-joda-time:1.1.0',
        'com.google.code.findbugs:jsr305:3.0.1',
        "uk.gov.ida:common-test-utils:2.0.0-$dependencyVersions.ida_test_utils",
        "com.github.tomakehurst:wiremock:2.10.1"
}

sourceSets {
    java9 {
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            java {
                srcDir 'src/main/java9'
            }
        }
    }
    java10 {
        if(JavaVersion.current() >= JavaVersion.VERSION_1_10) {
            java {
                srcDir 'src/main/java10'
            }
        }
    }
    intTest {
        java {
            srcDir 'src/integration-test/java'
        }
        resources {
            srcDir 'src/integration-test/resources'
            srcDir 'configuration'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
        compileClasspath += sourceSets.test.output
    }
}

compileJava {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

compileJava9Java {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.compilerArgs.addAll(['--release', '9'])
    }
}

compileJava10Java {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_10) {
        options.compilerArgs.addAll(['--release', '10'])
    }
}

ext.mainclass = 'uk.gov.ida.matchingserviceadapter.MatchingServiceAdapterApplication'
mainClassName = ext.mainclass

task copyToLib(dependsOn: jar, type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
}

task copyTestToolZip(dependsOn: 'verify-matching-service-test-tool:distZip', type: Copy) {
    from("verify-matching-service-test-tool/build/distributions/verify-matching-service-test-tool-*.zip")
    into(distsDir)
}

task zip(dependsOn: [copyToLib, copyTestToolZip], type: Zip) {
    from("$buildDir/output").into('./')
    from('RELEASE_NOTES.md', 'USAGE_README.md', 'prod-config.yml', 'test-config.yml').into('./')
    rename('USAGE_README\\.md', 'README\\.md')
}

task intTest(type: Test) {
    String maxParallelForksEnvVarValue = 1
    println "Overriding maxParallelForks value (value: \'${maxParallelForksEnvVarValue}\')"
    maxParallelForks = Integer.parseInt("${maxParallelForksEnvVarValue}")
    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath += sourceSets.intTest.runtimeClasspath
}

run {
    args = ["server", "configuration/verify-matching-service-adapter.yml"]
}

task(outputDependencies) doLast {
    println "ida_utils=$dependencyVersions.ida_utils"
}

distributions {
    paas {
        contents {
            from 'configuration/example-lms-msa.yml',
                 'src/main/resources/test_metadata_truststore.ts'

            with distributions.main.contents
        }
    }
}


tasks.check.dependsOn(intTest)

distZip {
    into(project.name + '/truststores') {
        from 'src/main/resources'
        include '*_metadata_truststore.ts'
    }
    into(project.name) {
        from 'configuration'
        include 'test-rp-msa.yml'
    }

    def versionedPath = archivePath
    version = null
    doLast {
        archivePath.renameTo(versionedPath)
    }
}

jar {
    def manifestClasspath = configurations.runtime.collect { 'lib/' + it.getName() }.join(' ')
    def buildNumber = System.getenv('BUILD_NUMBER')
    def gitCommit = System.getenv('GIT_COMMIT')

    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    into('META-INF/versions/10') {
        from sourceSets.java10.output
    }
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Class-Path': manifestClasspath,
                'Build-Number': buildNumber != null ? buildNumber : '',
                'Version-Number': project.version,
                'Git-Commit': gitCommit != null ? gitCommit : '',
                'Build-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm'Z'")
        )
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            attributes.put("Multi-Release", "true")
        }
    }

    archiveName = project.name + '.jar'
    destinationDir = file("$buildDir/output")
}
