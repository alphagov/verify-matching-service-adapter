group 'uk.gov.ida'
version = "$version"

apply plugin: 'java'
apply plugin: 'application'

repositories {
    if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
        logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
        mavenCentral()
    }
    else {
        maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
    }
}

buildscript {
    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/allowed-repos for production builds.\n\n')
            mavenCentral()
        }
        else {
            maven { url 'https://gds.jfrog.io/artifactory/allowed-repos' }
        }
    }
}

ext {
    everitJsonSchemaVersion = '1.5.1'
    commonsCliVersion = '1.4'
    jerseyVersion = '2.26'
    jacksonVersion = '2.16.0'
    javaValidationVersion = '2.0.0.Final'
    hamcrestVersion = '1.3'
    jUnitJupiterVersion = '5.9.2'
    jUnitPlatformLauncherVersion = '1.9.2'
    apiguardianVersion = '1.0.0'
    wiremockVersion = '2.10.1'
    mockitoVersion = '4.11.0'
    jaxbapiVersion = '2.2.9'
}

sourceSets {
    java9 {
        if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            java {
                srcDir 'src/main/java9'
            }
        }
    }
    java10 {
        if (JavaVersion.current() >= JavaVersion.VERSION_1_10) {
            java {
                srcDir 'src/main/java10'
            }
        }
    }
}

dependencies {
    implementation(
            "org.glassfish.jersey.core:jersey-client:$jerseyVersion",
            "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion",
            "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion",
            "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion",
            "javax.validation:validation-api:$javaValidationVersion",
            "org.hamcrest:hamcrest-library:$hamcrestVersion",
            "org.everit.json:org.everit.json.schema:$everitJsonSchemaVersion",
            "commons-cli:commons-cli:$commonsCliVersion",
            //junit 5
            "org.junit.jupiter:junit-jupiter-api:$jUnitJupiterVersion",
            "org.junit.platform:junit-platform-launcher:$jUnitPlatformLauncherVersion",
            "org.apiguardian:apiguardian-api:$apiguardianVersion"
    )

    runtimeOnly("org.junit.jupiter:junit-jupiter-engine:$jUnitJupiterVersion")

    testImplementation("com.github.tomakehurst:wiremock:$wiremockVersion",
            "org.mockito:mockito-core:$mockitoVersion",
            "javax.xml.bind:jaxb-api:$jaxbapiVersion")
}

compileJava {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

compileJava9Java {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.compilerArgs.addAll(['--release', '9'])
    }
}

compileJava10Java {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_10) {
        options.compilerArgs.addAll(['--release', '10'])
    }
}

jar {
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    into('META-INF/versions/10') {
        from sourceSets.java10.output
    }
    manifest {
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            attributes.put("Multi-Release", "true")
        }
    }
}

applicationDistribution.from("examples") {
    into "examples"
}

distZip {
    into(project.name + "-" + project.version) {
        from '.'
        include 'verify-matching-service-test-tool.yml'
        include 'README.md'
    }
}

task copyExamples(dependsOn: assemble) {
    doLast {
        ['build/classes', 'out'].each { dest ->
            copy {
                from 'examples'
                into "${dest}/examples"
            }
        }
    }
}

task copyConfiguration(dependsOn: assemble) {
    doLast {
        ['build/classes', 'out'].each { dest ->
            copy {
                from 'verify-matching-service-test-tool.yml'
                into dest
            }
        }
    }
}

test {
    dependsOn copyExamples, copyConfiguration
    useJUnitPlatform()
}
run { dependsOn copyExamples, copyConfiguration }

run {
    if ( project.hasProperty("commandLineArgs") ) {
        args Eval.me(commandLineArgs)
    }
}

mainClassName = 'uk.gov.ida.verifymatchingservicetesttool.Application'
