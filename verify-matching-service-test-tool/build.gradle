group 'uk.gov.ida'
version = "$version"

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

repositories {
    maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos' }
}

buildscript {
    repositories {
        maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos' }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

ext {
    everitJsonSchemaVersion = '1.5.1'
    commonsCliVersion = '1.4'
    jerseyVersion = '2.26'
    jacksonVersion = '2.9.2'
    javaValidationVersion = '2.0.0.Final'
    hamcrestVersion = '1.3'
    jUnitJupiterVersion = '5.0.1'
    jUnitPlatformLauncherVersion = '1.0.1'
    apiguardianVersion = '1.0.0'
    wiremockVersion = '2.10.1'
}

dependencies {
    compile(
            "org.glassfish.jersey.core:jersey-client:$jerseyVersion",
            "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion",
            "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion",
            "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion",
            "javax.validation:validation-api:$javaValidationVersion",
            "org.hamcrest:hamcrest-library:$hamcrestVersion",
            "org.everit.json:org.everit.json.schema:$everitJsonSchemaVersion",
            "commons-cli:commons-cli:$commonsCliVersion",
            //junit 5
            "org.junit.jupiter:junit-jupiter-api:$jUnitJupiterVersion",
            "org.junit.platform:junit-platform-launcher:$jUnitPlatformLauncherVersion",
            "org.apiguardian:apiguardian-api:$apiguardianVersion"
    )

    runtime("org.junit.jupiter:junit-jupiter-engine:$jUnitJupiterVersion")

    testCompile("com.github.tomakehurst:wiremock:$wiremockVersion")
}

applicationDistribution.from("examples") {
    into "examples"
}

distZip {
    into(project.name + "-" + project.version) {
        from '.'
        include 'verify-matching-service-test-tool.yml'
        include 'README.md'
    }
}

task copyExamples(dependsOn: assemble) {
    doLast {
        ['build', 'out'].each { dest ->
            copy {
                from 'examples'
                into "${dest}/examples"
            }
        }
    }
}

task copyConfiguration(dependsOn: assemble) {
    doLast {
        ['build', 'out'].each { dest ->
            copy {
                from 'verify-matching-service-test-tool.yml'
                into dest
            }
        }
    }
}

test { dependsOn copyExamples, copyConfiguration }
run { dependsOn copyExamples, copyConfiguration }

run {
    if ( project.hasProperty("commandLineArgs") ) {
        args Eval.me(commandLineArgs)
    }
}

mainClassName = 'uk.gov.ida.verifymatchingservicetesttool.Application'
